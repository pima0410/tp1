package com.sdzee.dao;

import static com.sdzee.dao.DAOUtils.fermetureSilencieuse;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.sdzee.beans.Client;

public class ClientDaoImpl implements ClientDao {

    private DAOFactory          daoFactory;

    private static final String SQL_QUERY_FIND_BY_ID = "SELECT * FROM CLIENT WHERE ID=?";
    private static final String SQL_QUERY_CREATE     = "INSERT INTO CLIENT (nom,prenom,adresse,telephone,email) VALUES(?,?,?,?,?)";
    private static final String SQL_QUERY_DELETE     = "DELETE FROM CLIENT WHERE id=?";
    private static final String SQL_QUERY_FIND_ALL   = "SELECT * FROM CLIENT";

    public ClientDaoImpl( DAOFactory factory ) {
        this.daoFactory = factory;
    }

    @Override
    public void supprimerClientParID( Long id ) {

        Client client = trouverClientParID( id );
        supprimerClient( client );
    }

    @Override
    public void creerClient( Client client ) {
        ResultSet resultat = null;
        PreparedStatement preparedStatement = null;
        Connection connection = null;
        ResultSet autoGeneratedId = null;

        try {
            connection = daoFactory.getConnection();

            preparedStatement = connection.prepareStatement( SQL_QUERY_CREATE, Statement.RETURN_GENERATED_KEYS );
            preparedStatement.setString( 1, client.getNom() );
            preparedStatement.setString( 2, client.getPrenom() );
            preparedStatement.setString( 3, client.getAdresse() );
            preparedStatement.setString( 4, client.getTelephone() );
            preparedStatement.setString( 5, client.getEmail() );
            int result = preparedStatement.executeUpdate();
            if ( result == 0 ) {
                throw new DAOException( "Impossible de créer le client " + client );
            }
            autoGeneratedId = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedId.next() ) {
                client.setId( autoGeneratedId.getLong( 1 ) );
            }

        } catch ( SQLException e ) {
            throw new DAOException( "Impossible de créer le client " + client, e );
        } finally {
            fermetureSilencieuse( connection, preparedStatement, resultat );
        }

    }

    @Override
    public void supprimerClient( Client client ) {
        ResultSet resultat = null;
        PreparedStatement preparedStatement = null;
        Connection connection = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = connection.prepareStatement( SQL_QUERY_DELETE );
            preparedStatement.setLong( 1, client.getId() );
            int result = preparedStatement.executeUpdate();
            if ( result == 0 ) {
                throw new DAOException( "Impossible de supprimer le client " + client );
            }
        } catch ( SQLException e ) {
            throw new DAOException( "Impossible de supprimer le client " + client, e );
        } finally {
            fermetureSilencieuse( connection, preparedStatement, resultat );
        }

    }

    @Override
    public Client trouverClientParID( Long id ) {
        Client client = new Client();
        ResultSet resultat = null;
        PreparedStatement preparedStatement = null;
        Connection connection = null;
        try {
            connection = daoFactory.getConnection();
            preparedStatement = connection.prepareStatement( SQL_QUERY_FIND_BY_ID );
            preparedStatement.setLong( 1, id );

            resultat = preparedStatement.executeQuery();

            if ( resultat.next() ) {
                client.setId( id );
                client.setAdresse( resultat.getString( "adresse" ) );
                client.setEmail( resultat.getString( "email" ) );
                client.setNom( resultat.getString( "nom" ) );
                client.setPrenom( resultat.getString( "prenom" ) );
                client.setTelephone( resultat.getString( "telephone" ) );
            }

        } catch ( SQLException e ) {
            throw new DAOException( "Impossible de trouver le client d'id " + id, e );
        } finally {
            fermetureSilencieuse( connection, preparedStatement, resultat );
        }
        return client;
    }

    @Override
    public List<Client> listerClient() {
        List<Client> listClient = new ArrayList<Client>();
        ResultSet resultat = null;
        PreparedStatement preparedStatement = null;
        Connection connection = null;
        Client client = new Client();
        try {
            connection = daoFactory.getConnection();
            preparedStatement = connection.prepareStatement( SQL_QUERY_FIND_ALL );
            resultat = preparedStatement.executeQuery();
            while ( resultat.next() ) {
                client = mapClient( resultat );

                listClient.add( client );
            }

        } catch ( SQLException e ) {
            throw new DAOException( "Impossible de récupérer les clients", e );
        } finally {
            fermetureSilencieuse( connection, preparedStatement, resultat );
        }

        return listClient;
    }

    private Client mapClient( ResultSet resultat ) throws SQLException {
        Client client = new Client();

        client.setId( resultat.getLong( "id" ) );
        client.setAdresse( resultat.getString( "adresse" ) );
        client.setEmail( resultat.getString( "email" ) );
        client.setNom( resultat.getString( "nom" ) );
        client.setPrenom( resultat.getString( "prenom" ) );
        client.setTelephone( resultat.getString( "telephone" ) );

        return client;
    }

}
